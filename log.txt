D:\wendy\study\2024-2025Fall\微机原理与微系统\期末项目>python model_cnn.py
2024-12-25 20:50:11.348865: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-12-25 20:50:13.006873: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
D:\others\software\anaconda\anaconda3\Lib\site-packages\keras\src\layers\convolutional\base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2024-12-25 20:50:37.327059: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
Model: "sequential"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓
┃ Layer (type)                         ┃ Output Shape                ┃         Param # ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩
│ conv2d (Conv2D)                      │ (None, 56, 56, 35)          │           5,180 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ leaky_re_lu (LeakyReLU)              │ (None, 56, 56, 35)          │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ batch_normalization                  │ (None, 56, 56, 35)          │             140 │
│ (BatchNormalization)                 │                             │                 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ max_pooling2d (MaxPooling2D)         │ (None, 28, 28, 35)          │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ conv2d_1 (Conv2D)                    │ (None, 28, 28, 20)          │          17,520 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ leaky_re_lu_1 (LeakyReLU)            │ (None, 28, 28, 20)          │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ dropout (Dropout)                    │ (None, 28, 28, 20)          │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ batch_normalization_1                │ (None, 28, 28, 20)          │              80 │
│ (BatchNormalization)                 │                             │                 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ max_pooling2d_1 (MaxPooling2D)       │ (None, 14, 14, 20)          │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ conv2d_2 (Conv2D)                    │ (None, 14, 14, 10)          │           1,810 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ leaky_re_lu_2 (LeakyReLU)            │ (None, 14, 14, 10)          │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ batch_normalization_2                │ (None, 14, 14, 10)          │              40 │
│ (BatchNormalization)                 │                             │                 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ max_pooling2d_2 (MaxPooling2D)       │ (None, 7, 7, 10)            │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ flatten (Flatten)                    │ (None, 490)                 │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ dense (Dense)                        │ (None, 128)                 │          62,848 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ leaky_re_lu_3 (LeakyReLU)            │ (None, 128)                 │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ dropout_1 (Dropout)                  │ (None, 128)                 │               0 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ dense_1 (Dense)                      │ (None, 128)                 │          16,512 │
├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤
│ dense_2 (Dense)                      │ (None, 6)                   │             774 │
└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘
 Total params: 104,904 (409.78 KB)
 Trainable params: 104,774 (409.27 KB)
 Non-trainable params: 130 (520.00 B)
D:\others\software\anaconda\anaconda3\Lib\site-packages\keras\src\trainers\data_adapters\py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.
  self._warn_if_super_not_called()
Epoch 1/10
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1735131040.911633   16344 meta_optimizer.cc:966] remapper failed: INVALID_ARGUMENT: Mutation::Apply error: fanout 'StatefulPartitionedCall/gradient_tape/sequential_1/leaky_re_lu_1/LeakyRelu/LeakyReluGrad' exist for missing node 'StatefulPartitionedCall/sequential_1/conv2d_1/BiasAdd'.
113/113 ━━━━━━━━━━━━━━━━━━━━ 20s 146ms/step - accuracy: 0.6396 - loss: 1.0669 - val_accuracy: 0.5426 - val_loss: 5.2292
Epoch 2/10
113/113 ━━━━━━━━━━━━━━━━━━━━ 18s 158ms/step - accuracy: 0.9487 - loss: 0.2819 - val_accuracy: 0.9837 - val_loss: 0.2073
Epoch 3/10
113/113 ━━━━━━━━━━━━━━━━━━━━ 18s 153ms/step - accuracy: 0.9753 - loss: 0.1845 - val_accuracy: 0.9373 - val_loss: 0.2792
Epoch 4/10
113/113 ━━━━━━━━━━━━━━━━━━━━ 18s 161ms/step - accuracy: 0.9839 - loss: 0.1578 - val_accuracy: 0.9749 - val_loss: 0.1978
Epoch 5/10
113/113 ━━━━━━━━━━━━━━━━━━━━ 18s 157ms/step - accuracy: 0.9906 - loss: 0.1272 - val_accuracy: 0.9887 - val_loss: 0.1384
Epoch 6/10
113/113 ━━━━━━━━━━━━━━━━━━━━ 19s 171ms/step - accuracy: 0.9881 - loss: 0.1281 - val_accuracy: 0.9962 - val_loss: 0.0925
Epoch 7/10
113/113 ━━━━━━━━━━━━━━━━━━━━ 18s 156ms/step - accuracy: 0.9949 - loss: 0.1009 - val_accuracy: 0.9937 - val_loss: 0.1012
Epoch 8/10
113/113 ━━━━━━━━━━━━━━━━━━━━ 18s 156ms/step - accuracy: 0.9921 - loss: 0.0995 - val_accuracy: 0.9975 - val_loss: 0.0715
Epoch 9/10
113/113 ━━━━━━━━━━━━━━━━━━━━ 17s 150ms/step - accuracy: 0.9937 - loss: 0.0870 - val_accuracy: 0.9912 - val_loss: 0.1103
Epoch 10/10
113/113 ━━━━━━━━━━━━━━━━━━━━ 18s 155ms/step - accuracy: 0.9947 - loss: 0.0766 - val_accuracy: 0.9837 - val_loss: 0.1014
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.